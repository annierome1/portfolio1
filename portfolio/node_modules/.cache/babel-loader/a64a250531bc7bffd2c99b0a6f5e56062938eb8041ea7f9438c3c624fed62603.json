{"ast":null,"code":"var _jsxFileName = \"/Users/annierome/Documents/GitHub/portfolio1/portfolio/src/components/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [streamingResponse, setStreamingResponse] = useState(\"\");\n  const eventSourceRef = useRef(null);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      role: \"user\",\n      content: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setStreamingResponse(\"\");\n    try {\n      const response = await fetch(\"http://localhost:8000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let botMessage = {\n        role: \"bot\",\n        content: \"\"\n      };\n      let accumulatedResponse = \"\";\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value, {\n          stream: true\n        });\n        const cleanChunk = chunk.split(\"\\n\").map(line => line.replace(/^data /, \"\").trim()).join(\" \");\n        accumulatedResponse += cleanChunk + \" \";\n        botMessage.content = accumulatedResponse;\n        setMessages(prev => [...prev.slice(0, -1), botMessage]);\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n    setInput(\"\"); // Clear input field\n  };\n  const clearMessages = () => {\n    setMessages([]);\n    setStreamingResponse(\"\");\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-gray-800 mb-4 text-center\",\n      children: \"Ask me anything!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.role === \"user\" ? \"user-message\" : \"bot-message\",\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)), streamingResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bot-message\",\n        children: streamingResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Ask me anything...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear\",\n        onClick: clearMessages,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"imlhSic06tUbN27sIr4uq5ID6yw=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","streamingResponse","setStreamingResponse","eventSourceRef","sendMessage","trim","userMessage","role","content","prev","response","fetch","method","headers","body","JSON","stringify","message","reader","getReader","decoder","TextDecoder","botMessage","accumulatedResponse","value","done","read","chunk","decode","stream","cleanChunk","split","map","line","replace","join","slice","error","console","clearMessages","current","close","className","children","fileName","_jsxFileName","lineNumber","columnNumber","msg","index","type","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/annierome/Documents/GitHub/portfolio1/portfolio/src/components/chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatbot.css\";\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [streamingResponse, setStreamingResponse] = useState(\"\");\n  const eventSourceRef = useRef(null); \n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { role: \"user\", content: input };\n    setMessages((prev) => [...prev, userMessage]);\n    setStreamingResponse(\"\");\n\n\n    try {\n        const response = await fetch(\"http://localhost:8000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ message: input }),\n        });\n  \n        const reader = response.body.getReader();\n        const decoder = new TextDecoder(\"utf-8\");\n        let botMessage = { role: \"bot\", content: \"\" };\n\n        let accumulatedResponse = \"\";\n  \n        \n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) break;\n  \n          const chunk = decoder.decode(value, { stream: true });\n\n          const cleanChunk = chunk\n            .split(\"\\n\")\n            .map(line => line.replace(/^data /, \"\").trim())\n            .join(\" \");\n        \n          accumulatedResponse += cleanChunk + \" \";\n          botMessage.content = accumulatedResponse;\n  \n          setMessages((prev) => [...prev.slice(0, -1), botMessage]); \n        }\n  \n        \n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n  \n      setInput(\"\"); // Clear input field\n    };\n\n\n  const clearMessages = () => {\n    setMessages([]); \n    setStreamingResponse(\"\"); \n    if (eventSourceRef.current) {\n      eventSourceRef.current.close(); \n      eventSourceRef.current = null;\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h2 className=\"text-2xl font-bold text-gray-800 mb-4 text-center\">Ask me anything!</h2>\n      <div className=\"chatbox\">\n        {messages.map((msg, index) => (\n          <div key={index} className={msg.role === \"user\" ? \"user-message\" : \"bot-message\"}>\n            {msg.content}\n          </div>\n        ))}\n        {streamingResponse && <div className=\"bot-message\">{streamingResponse}</div>}\n      </div>\n\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Ask me anything...\"\n        />\n        <button className=\"send\" onClick={sendMessage}>Send</button>\n        <button className=\"clear\" onClick={clearMessages}>Clear</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}