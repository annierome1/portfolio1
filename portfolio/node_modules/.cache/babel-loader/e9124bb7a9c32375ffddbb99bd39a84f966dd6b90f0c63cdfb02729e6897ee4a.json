{"ast":null,"code":"var _jsxFileName = \"/Users/annierome/Documents/GitHub/portfolio1/portfolio/src/components/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      role: \"user\",\n      content: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      const response = await fetch(\"http://localhost:8000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let botMessage = {\n        role: \"bot\",\n        content: \"\"\n      };\n\n      // ✅ Read streaming response\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value, {\n          stream: true\n        });\n        botMessage.content += chunk;\n        setMessages(prev => [...prev.slice(0, -1), botMessage]); // Update last message\n      }\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n    setInput(\"\"); // Clear input field\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.role === \"user\" ? \"user-message\" : \"bot-message\",\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Ask me anything...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","sendMessage","trim","userMessage","role","content","prev","response","fetch","method","headers","body","JSON","stringify","message","reader","getReader","decoder","TextDecoder","botMessage","value","done","read","chunk","decode","stream","slice","error","console","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/annierome/Documents/GitHub/portfolio1/portfolio/src/components/chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./chatbot.css\"\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const userMessage = { role: \"user\", content: input };\n    setMessages((prev) => [...prev, userMessage]);\n\n    try {\n      const response = await fetch(\"http://localhost:8000/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: input }),\n      });\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let botMessage = { role: \"bot\", content: \"\" };\n\n      // ✅ Read streaming response\n      while (true) {\n        const { value, done } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value, { stream: true });\n        botMessage.content += chunk;\n\n        setMessages((prev) => [...prev.slice(0, -1), botMessage]); // Update last message\n      }\n\n      setMessages((prev) => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n\n    setInput(\"\"); // Clear input field\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chatbox\">\n        {messages.map((msg, index) => (\n          <div key={index} className={msg.role === \"user\" ? \"user-message\" : \"bot-message\"}>\n            {msg.content}\n          </div>\n        ))}\n      </div>\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Ask me anything...\"\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}