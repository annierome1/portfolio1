{"ast":null,"code":"var _jsxFileName = \"/Users/annierome/Documents/GitHub/portfolio1/portfolio/src/components/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [streamingResponse, setStreamingResponse] = useState(\"\");\n  const eventSourceRef = useRef(null);\n  const chatContainerRef = useRef(null);\n  const endOfMessagesRef = useRef(null);\n\n  // Helper function: scroll the dummy element into view.\n  const scrollToBottom = () => {\n    var _endOfMessagesRef$cur;\n    (_endOfMessagesRef$cur = endOfMessagesRef.current) === null || _endOfMessagesRef$cur === void 0 ? void 0 : _endOfMessagesRef$cur.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // useEffect to scroll after each messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    console.log(\"Starting chatbot request...\");\n    const userMessage = {\n      role: \"user\",\n      content: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setStreamingResponse(\"\");\n    setIsTyping(true);\n    try {\n      const API_BASE_URL = \"https://chatbotannie-production.up.railway.app\";\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input,\n          session_id: \"session_123\"\n        })\n      });\n      const startReqTime = performance.now();\n      const endReqTime = performance.now();\n      console.log(`API request completed in ${(endReqTime - startReqTime).toFixed(4)} ms`);\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let botMessage = {\n        role: \"bot\",\n        content: \"\"\n      };\n      let firstChunk = true;\n      setMessages(prev => [...prev, botMessage]);\n      let buffer = \"\";\n      const updateInterval = 100; // update every 100ms\n      let lastUpdateTime = Date.now();\n      const startStreamTime = performance.now();\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value, {\n          stream: true\n        });\n        buffer += chunk;\n        const now = Date.now();\n\n        // Update state if enough time has passed or on first chunk\n        if (firstChunk || now - lastUpdateTime > updateInterval) {\n          botMessage.content += buffer;\n          setMessages(prev => [...prev.slice(0, -1), {\n            ...botMessage\n          }]);\n          // Force scroll update immediately after state update\n          setTimeout(scrollToBottom, 10);\n          buffer = \"\";\n          lastUpdateTime = now;\n          if (firstChunk) {\n            firstChunk = false;\n            setIsTyping(false);\n          }\n        }\n      }\n      if (buffer.length > 0) {\n        botMessage.content += buffer;\n        setMessages(prev => [...prev.slice(0, -1), {\n          ...botMessage\n        }]);\n        setTimeout(scrollToBottom, 10);\n      }\n      const endStreamTime = performance.now();\n      console.log(`Streaming took ${(endStreamTime - startStreamTime).toFixed(4)} ms`);\n      console.log(`Total chatbot response time: ${(endStreamTime - startReqTime).toFixed(4)} ms`);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  const clearMessages = () => {\n    setMessages([]);\n    setStreamingResponse(\"\");\n    setIsTyping(false);\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-wrapper\",\n    style: {\n      width: \"350px\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chat-button ${isOpen ? \"hide-chat\" : \"show-chat\"}`,\n      onClick: () => setIsOpen(true),\n      children: \"Chat with me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-container ${isOpen ? \"show-chat\" : \"hide-chat\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chat with me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: () => setIsOpen(false),\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox\",\n        ref: chatContainerRef,\n        style: {\n          height: \"400px\",\n          overflowY: \"auto\",\n          padding: \"10px\"\n        },\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.role === \"user\" ? \"user-message\" : \"bot-message\",\n          children: msg.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: endOfMessagesRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-typing\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        style: {\n          display: \"flex\",\n          padding: \"10px\",\n          backgroundColor: \"#111827\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              sendMessage();\n              e.preventDefault();\n            }\n          },\n          placeholder: \"Ask me anything...\",\n          style: {\n            flex: 1,\n            marginRight: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear\",\n          onClick: clearMessages,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"Ck1m3fEU/yDA/FazaNlcT4GM/mA=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","isOpen","setIsOpen","streamingResponse","setStreamingResponse","eventSourceRef","chatContainerRef","endOfMessagesRef","scrollToBottom","_endOfMessagesRef$cur","current","scrollIntoView","behavior","sendMessage","trim","console","log","userMessage","role","content","prev","API_BASE_URL","response","fetch","method","headers","body","JSON","stringify","message","session_id","startReqTime","performance","now","endReqTime","toFixed","reader","getReader","decoder","TextDecoder","botMessage","firstChunk","buffer","updateInterval","lastUpdateTime","Date","startStreamTime","value","done","read","chunk","decode","stream","slice","setTimeout","length","endStreamTime","error","clearMessages","close","className","style","width","position","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","height","overflowY","padding","map","msg","index","display","backgroundColor","type","onChange","e","target","onKeyDown","key","preventDefault","placeholder","flex","marginRight","_c","$RefreshReg$"],"sources":["/Users/annierome/Documents/GitHub/portfolio1/portfolio/src/components/chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatbot.css\";\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [streamingResponse, setStreamingResponse] = useState(\"\");\n  const eventSourceRef = useRef(null); \n  const chatContainerRef = useRef(null);\n  const endOfMessagesRef = useRef(null);\n\n  // Helper function: scroll the dummy element into view.\n  const scrollToBottom = () => {\n    endOfMessagesRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // useEffect to scroll after each messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    console.log(\"Starting chatbot request...\");\n    const userMessage = { role: \"user\", content: input };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\"\");\n    setStreamingResponse(\"\");\n    setIsTyping(true);\n\n    try {\n      const API_BASE_URL = \"https://chatbotannie-production.up.railway.app\"; \n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: input, session_id: \"session_123\" }),\n      });\n      const startReqTime = performance.now();\n      const endReqTime = performance.now();\n      console.log(`API request completed in ${(endReqTime - startReqTime).toFixed(4)} ms`);\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let botMessage = { role: \"bot\", content: \"\" };\n      let firstChunk = true;\n      setMessages((prev) => [...prev, botMessage]);\n\n      let buffer = \"\";\n      const updateInterval = 100; // update every 100ms\n      let lastUpdateTime = Date.now();\n      const startStreamTime = performance.now();\n\n      while (true) {\n        const { value, done } = await reader.read();\n        if (done) break;\n        \n        const chunk = decoder.decode(value, { stream: true });\n        buffer += chunk;\n        const now = Date.now();\n\n        // Update state if enough time has passed or on first chunk\n        if (firstChunk || now - lastUpdateTime > updateInterval) {\n          botMessage.content += buffer;\n          setMessages((prev) => [...prev.slice(0, -1), { ...botMessage }]);\n          // Force scroll update immediately after state update\n          setTimeout(scrollToBottom, 10);\n          buffer = \"\";\n          lastUpdateTime = now;\n          if (firstChunk) {\n            firstChunk = false;\n            setIsTyping(false);\n          }\n        }\n      }\n\n      if (buffer.length > 0) {\n        botMessage.content += buffer;\n        setMessages((prev) => [...prev.slice(0, -1), { ...botMessage }]);\n        setTimeout(scrollToBottom, 10);\n      }\n\n      const endStreamTime = performance.now();\n      console.log(`Streaming took ${(endStreamTime - startStreamTime).toFixed(4)} ms`);\n      console.log(`Total chatbot response time: ${(endStreamTime - startReqTime).toFixed(4)} ms`);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n    setStreamingResponse(\"\");\n    setIsTyping(false);\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n  };\n\n  return (\n    <div className=\"chatbot-wrapper\" style={{ width: \"350px\", position: \"relative\" }}>\n      <button\n        className={`chat-button ${isOpen ? \"hide-chat\" : \"show-chat\"}`}\n        onClick={() => setIsOpen(true)}\n      >\n        Chat with me\n      </button>\n      <div className={`chat-container ${isOpen ? \"show-chat\" : \"hide-chat\"}`}>\n        <div className=\"chat-header\">\n          <h2>Chat with me</h2>\n          <button className=\"close-btn\" onClick={() => setIsOpen(false)}>\n            ✖\n          </button>\n        </div>\n        {/* Set a fixed height and overflow for auto-scrolling */}\n        <div\n          className=\"chatbox\"\n          ref={chatContainerRef}\n          style={{ height: \"400px\", overflowY: \"auto\", padding: \"10px\" }}\n        >\n          {messages.map((msg, index) => (\n            <div\n              key={index}\n              className={msg.role === \"user\" ? \"user-message\" : \"bot-message\"}\n            >\n              {msg.content}\n            </div>\n          ))}\n          {/* Dummy element for scrolling */}\n          <div ref={endOfMessagesRef} />\n          {isTyping && (\n            <div className=\"bot-typing\">\n              <div className=\"typing-indicator\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div\n          className=\"chat-input\"\n          style={{ display: \"flex\", padding: \"10px\", backgroundColor: \"#111827\" }}\n        >\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                sendMessage();\n                e.preventDefault();\n              }\n            }}\n            placeholder=\"Ask me anything...\"\n            style={{ flex: 1, marginRight: \"5px\" }}\n          />\n          <button className=\"send\" onClick={sendMessage}>\n            Send\n          </button>\n          <button className=\"clear\" onClick={clearMessages}>\n            Clear\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}