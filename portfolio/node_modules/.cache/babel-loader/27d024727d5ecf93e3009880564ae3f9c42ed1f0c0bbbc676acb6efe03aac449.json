{"ast":null,"code":"var _jsxFileName = \"/Users/annierome/Documents/GitHub/portfolio1/portfolio/src/components/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [streamingResponse, setStreamingResponse] = useState(\"\");\n  const eventSourceRef = useRef(null);\n  const chatContainerRef = useRef(null);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    console.log(\"Starting chatbot request...\");\n    const userMessage = {\n      role: \"user\",\n      content: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setStreamingResponse(\"\");\n    setIsTyping(true);\n    try {\n      const API_BASE_URL = \"https://chatbotannie-production.up.railway.app\";\n      const API_DEV_URL = \"http://0.0.0.0:8006\";\n      const startReqTime = performance.now();\n      const response = await fetch(`${API_DEV_URL}/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input,\n          session_id: \"session_123\"\n        })\n      });\n      const endReqTime = performance.now();\n      console.log(`API reuqest completed in ${(endReqTime - startReqTime).toFixed(4)} ms`);\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let botMessage = {\n        role: \"bot\",\n        content: \"\"\n      };\n      let firstChunk = true;\n      setMessages(prev => [...prev, botMessage]);\n      let buffer = \"\";\n      const updateInterval = 100; // update every 100ms\n      let lastUpdateTime = Date.now();\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value, {\n          stream: true\n        });\n        buffer += chunk;\n        const now = Date.now();\n\n        // Update state if enough time has passed or on first chunk\n        if (firstChunk || now - lastUpdateTime > updateInterval) {\n          botMessage.content += buffer;\n          setMessages(prev => [...prev.slice(0, -1), {\n            ...botMessage\n          }]);\n          buffer = \"\";\n          lastUpdateTime = now;\n          if (firstChunk) {\n            firstChunk = false;\n            setIsTyping(false);\n          }\n        }\n      }\n\n      // Final update if there's any remaining buffered content\n      if (buffer.length > 0) {\n        botMessage.content += buffer;\n        setMessages(prev => [...prev.slice(0, -1), {\n          ...botMessage\n        }]);\n      }\n      ;\n      const endStreamTime = performance.now();\n      console.log(`Streaming took ${(endStreamTime - startStreamTime).toFixed(4)} ms`);\n      console.log(`Total chatbot response time: ${(endStreamTime - startReqTime).toFixed(4)} ms`);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n    ;\n    setInput(\"\");\n  };\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const clearMessages = () => {\n    setMessages([]);\n    setStreamingResponse(\"\");\n    setIsTyping(false);\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-wrapper\",\n    style: {\n      width: \"350px\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chat-button ${isOpen ? \"hide-chat\" : \"show-chat\"}`,\n      onClick: () => setIsOpen(true),\n      children: \"Chat with me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-container ${isOpen ? \"show-chat\" : \"hide-chat\"}`,\n      ref: chatContainerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chat with me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: () => setIsOpen(false),\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox\",\n        ref: chatContainerRef,\n        style: {\n          flex: 1,\n          overflowY: \"auto\"\n        },\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.role === \"user\" ? \"user-message\" : \"bot-message\",\n          children: msg.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this)), streamingResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-message\",\n          children: streamingResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-typing\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        style: {\n          display: \"flex\",\n          padding: \"10px\",\n          backgroundColor: \"#111827\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Ask me anything...\",\n          style: {\n            flex: 1,\n            marginRight: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear\",\n          onClick: clearMessages,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"RuJkqxRPDQMYYAWEvQB6bG5qxIs=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","isOpen","setIsOpen","streamingResponse","setStreamingResponse","eventSourceRef","chatContainerRef","sendMessage","trim","console","log","userMessage","role","content","prev","API_BASE_URL","API_DEV_URL","startReqTime","performance","now","response","fetch","method","headers","body","JSON","stringify","message","session_id","endReqTime","toFixed","reader","getReader","decoder","TextDecoder","botMessage","firstChunk","buffer","updateInterval","lastUpdateTime","Date","value","done","read","chunk","decode","stream","slice","length","endStreamTime","startStreamTime","error","current","scrollTop","scrollHeight","clearMessages","close","className","style","width","position","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","flex","overflowY","map","msg","index","display","padding","backgroundColor","type","onChange","e","target","placeholder","marginRight","_c","$RefreshReg$"],"sources":["/Users/annierome/Documents/GitHub/portfolio1/portfolio/src/components/chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./chatbot.css\";\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState(\"\");\n    const [isTyping, setIsTyping] = useState(false);\n    const [isOpen, setIsOpen] = useState(false);\n    const [streamingResponse, setStreamingResponse] = useState(\"\");\n    const eventSourceRef = useRef(null); \n    const chatContainerRef = useRef(null);\n  \n    const sendMessage = async () => {\n      if (!input.trim()) return;\n\n      console.log(\"Starting chatbot request...\");\n    \n      const userMessage = { role: \"user\", content: input };\n      setMessages((prev) => [...prev, userMessage]);\n      setInput(\"\");\n      setStreamingResponse(\"\");\n      setIsTyping(true);\n  \n  \n      try {\n  \n        const API_BASE_URL = \"https://chatbotannie-production.up.railway.app\"; \n        const API_DEV_URL = \"http://0.0.0.0:8006\";\n  \n          const startReqTime = performance.now();\n          const response = await fetch(`${API_DEV_URL}/chat`, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ message: input, session_id: \"session_123\" }),\n          });\n          const endReqTime = performance.now()\n          console.log(`API reuqest completed in ${(endReqTime - startReqTime).toFixed(4)} ms`);\n  \n    \n            const reader = response.body.getReader();\n            const decoder = new TextDecoder(\"utf-8\");\n            let botMessage = { role: \"bot\", content: \"\" };\n            let firstChunk = true;\n            setMessages((prev) => [...prev, botMessage]);\n\n            let buffer = \"\";\n            const updateInterval = 100; // update every 100ms\n            let lastUpdateTime = Date.now();\n\n            while (true) {\n                const { value, done } = await reader.read();\n                if (done) break;\n\n                const chunk = decoder.decode(value, { stream: true });\n                buffer += chunk;\n                const now = Date.now();\n\n                // Update state if enough time has passed or on first chunk\n                if (firstChunk || now - lastUpdateTime > updateInterval) {\n                botMessage.content += buffer;\n                setMessages((prev) => [...prev.slice(0, -1), { ...botMessage }]);\n                buffer = \"\";\n                lastUpdateTime = now;\n                if (firstChunk) {\n                    firstChunk = false;\n                    setIsTyping(false);\n                }\n                }\n            }\n\n            // Final update if there's any remaining buffered content\n            if (buffer.length > 0) {\n                botMessage.content += buffer;\n                setMessages((prev) => [...prev.slice(0, -1), { ...botMessage }]);\n            };\n\n          const endStreamTime = performance.now()\n          console.log(`Streaming took ${(endStreamTime - startStreamTime).toFixed(4)} ms`);\n          console.log(`Total chatbot response time: ${(endStreamTime - startReqTime).toFixed(4)} ms`);\n    \n          \n        } catch (error) {\n          console.error(\"Error:\", error);\n        } finally {\n          setIsTyping(false);\n        \n      };\n    \n        setInput(\"\"); \n      };\n  \n      useEffect(() => {\n          if (chatContainerRef.current) {\n            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n          }\n        }, [messages]);  \n  \n  \n    const clearMessages = () => {\n      setMessages([]); \n      setStreamingResponse(\"\"); \n      setIsTyping(false);\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close(); \n        eventSourceRef.current = null;\n      }\n    };\n\n    return (\n        <div className=\"chatbot-wrapper\" style={{ width: \"350px\", position: \"relative\" }}>\n          <button\n            className={`chat-button ${isOpen ? \"hide-chat\" : \"show-chat\"}`}\n            onClick={() => setIsOpen(true)}\n          >\n            Chat with me\n          </button>\n          <div\n            className={`chat-container ${isOpen ? \"show-chat\" : \"hide-chat\"}`}\n            ref={chatContainerRef}\n          >\n            <div className=\"chat-header\">\n              <h2>Chat with me</h2>\n              <button className=\"close-btn\" onClick={() => setIsOpen(false)}>\n                ✖\n              </button>\n            </div>\n    \n\n          <div\n            className=\"chatbox\"\n            ref={chatContainerRef}\n            style={{ flex: 1, overflowY: \"auto\"}}\n          >\n            {messages.map((msg, index) => (\n              <div\n                key={index}\n                className={msg.role === \"user\" ? \"user-message\" : \"bot-message\"}\n              >\n                {msg.content}\n              </div>\n            ))}\n            {streamingResponse && (\n              <div className=\"bot-message\">{streamingResponse}</div>\n            )}\n            {isTyping && (\n              <div className=\"bot-typing\">\n                <div className=\"typing-indicator\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div\n            className=\"chat-input\"\n            style={{ display: \"flex\", padding: \"10px\", backgroundColor: \"#111827\" }}\n          >\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Ask me anything...\"\n              style={{ flex: 1, marginRight: \"5px\" }}\n            />\n            <button className=\"send\" onClick={sendMessage}>\n              Send\n            </button>\n            <button className=\"clear\" onClick={clearMessages}>\n              Clear\n            </button>\n          </div>\n        </div>\n\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}